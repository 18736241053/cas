<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <on-start>
        <evaluate expression="loginRequestFactory.createLoginRequest(flowRequestContext)" result="flowScope.create" result-type="java.lang.String" />
    </on-start>
    
    <decision-state id="multipleDecisions">
        <if test="(loginRequest.sessionId eq null || loginRequest.sessionId.length() eq 0) and create eq 'error'" then="viewLoginForm" />

        <!-- if you have non-interactive credentials then you may wish to have them checked even for a passive authentication -->
        <if test="(loginRequest.sessionId eq null || loginRequest.sessionId.length() eq 0) and create eq 'success' and loginRequest.passiveAuthentication" then="passiveReturnToApplication" />
        <if test="(loginRequest.sessionId eq null || loginRequest.sessionId.length() eq 0) and create eq 'success' and not loginRequest.passiveAuthentication" then="viewLoginForm" />

        <!-- at this point there should be no empty session ids -->
        <if test="create eq 'error'" then="viewGenericLoginSuccess" />

        <!-- at this point there should be a service -->
        <if test="loginRequest.forceAuthentication" then="viewLoginForm" else="generateAccess" />
    </decision-state>

	<view-state id="viewLoginForm" view="casLoginView" model="credentials">
        <var name="credentials" class="org.jasig.cas.server.authentication.DefaultUserNamePasswordCredential" />
        <binder>
            <binding property="userName" required="true" />
            <binding property="password" required="true" />
        </binder>
        <on-entry>
            <set name="viewScope.commandName" value="'credentials'" />
            <evaluate expression="loginRequest.credentials.clear()" />
            <set name="viewScope.loginResponse" value="requestScope.loginResponse" />
        </on-entry>

        <transition on="submit" to="determineIfSessionCreated" bind="true" validate="true">
            <evaluate expression="loginRequest.credentials.add(credentials)" />
            <evaluate expression="centralAuthenticationService.login(loginRequest)" result="requestScope.loginResponse" result-type="org.jasig.cas.server.login.LoginResponse" />
            <evaluate expression="sessionCookieCreater.createSessionCookie(loginResponse, null, externalContext)" />
            <evaluate expression="loginRequest.setSessionId(loginResponse.sessionId)" />
        </transition>
	</view-state>

    <decision-state id="determineIfSessionCreated">
        <if test="loginResponse.sessionId eq null || loginResponse.sessionId.length() eq 0" then="viewLoginForm" />
        <if test="create eq 'success'" then="generateAccess" else="viewGenericLoginSuccess" />
    </decision-state>

    <!-- This is a placeholder for now. -->
     <action-state id="generateAccess">
         <transition to="viewGenericLoginSuccess" />
     </action-state>
    

    <end-state id="passiveReturnToApplication" view="externalRedirect:${loginRequest.passiveAuthenticationRedirectUrl}" />

	<!--
		the "viewGenericLogin" is the end state for when a user attempts to login without coming directly from a service.
		They have only initialized their single-sign on session.
	-->
	<end-state id="viewGenericLoginSuccess" view="casLoginGenericSuccessView" />

	<end-state id="viewServiceErrorView" view="viewServiceErrorView" />
    
    <end-state id="viewServiceSsoErrorView" view="viewServiceSsoErrorView" />

	<global-transitions>
		<transition to="viewServiceErrorView" on-exception="org.springframework.webflow.execution.repository.NoSuchFlowExecutionException" />
        <transition to="viewServiceSsoErrorView" on-exception="org.jasig.cas.services.UnauthorizedSsoServiceException" />
		<transition to="viewServiceErrorView" on-exception="org.jasig.cas.services.UnauthorizedServiceException" />
	</global-transitions>
</flow>